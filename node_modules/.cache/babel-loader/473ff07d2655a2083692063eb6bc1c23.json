{"ast":null,"code":"var MultipleTargetSource = \"import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = (count, offset = 0) =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k + offset}`,\\n      content: `item ${k + offset}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\n/**\\n * Moves an item from one list to another list.\\n */\\nconst move = (source, destination, droppableSource, droppableDestination) => {\\n   const sourceClone = Array.from(source);\\n   const destClone = Array.from(destination);\\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\\n\\n   destClone.splice(droppableDestination.index, 0, removed);\\n\\n   const result = {};\\n   result[droppableSource.droppableId] = sourceClone;\\n   result[droppableDestination.droppableId] = destClone;\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: `0 0 ${grid}px 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass multipleTarget extends Component {\\n   state = {\\n      items: getItems(10),\\n      selected: getItems(5, 10)\\n   };\\n\\n   /**\\n    * A semi-generic way to handle multiple lists. Matches\\n    * the IDs of the droppable container to the names of the\\n    * source arrays stored in the state.\\n    */\\n   id2List = {\\n      droppable: \\\"items\\\",\\n      droppable2: \\\"selected\\\"\\n   };\\n\\n   getList = id => this.state[this.id2List[id]];\\n\\n   onDragEnd = result => {\\n      const { source, destination } = result;\\n\\n      // dropped outside the list\\n      if (!destination) {\\n         return;\\n      }\\n\\n      if (source.droppableId === destination.droppableId) {\\n         const items = reorder(\\n            this.getList(source.droppableId),\\n            source.index,\\n            destination.index\\n         );\\n\\n         let state = { items };\\n\\n         if (source.droppableId === \\\"droppable2\\\") {\\n            state = { selected: items };\\n         }\\n\\n         this.setState(state);\\n      } else {\\n         const result = move(\\n            this.getList(source.droppableId),\\n            this.getList(destination.droppableId),\\n            source,\\n            destination\\n         );\\n\\n         this.setState({\\n            items: result.droppable,\\n            selected: result.droppable2\\n         });\\n      }\\n   };\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n            <Droppable droppableId=\\\"droppable2\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.selected.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default multipleTarget;\\n\";\nexport default MultipleTargetSource;","map":{"version":3,"sources":["C:/xampp/htdocs/api_react/src/views/components/extra/exampleSource/dndMultipleTarget.js"],"names":["MultipleTargetSource"],"mappings":"AAAA,IAAMA,oBAAoB,s4LAA1B;AAyLA,eAAeA,oBAAf","sourcesContent":["const MultipleTargetSource = `import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n   Array.from({ length: count }, (v, k) => k).map(k => ({\r\n      id: \\`item-\\${k + offset}\\`,\r\n      content: \\`item \\${k + offset}\\`\r\n   }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n   const result = Array.from(list);\r\n   const [removed] = result.splice(startIndex, 1);\r\n   result.splice(endIndex, 0, removed);\r\n\r\n   return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n   const sourceClone = Array.from(source);\r\n   const destClone = Array.from(destination);\r\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n   destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n   const result = {};\r\n   result[droppableSource.droppableId] = sourceClone;\r\n   result[droppableDestination.droppableId] = destClone;\r\n\r\n   return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n   // some basic styles to make the items look a bit nicer\r\n   userSelect: \"none\",\r\n   padding: grid * 2,\r\n   margin: \\`0 0 \\${grid}px 0\\`,\r\n\r\n   // change background colour if dragging\r\n   background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n   // styles we need to apply on draggables\r\n   ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n   padding: grid,\r\n   width: 250\r\n});\r\n\r\nclass multipleTarget extends Component {\r\n   state = {\r\n      items: getItems(10),\r\n      selected: getItems(5, 10)\r\n   };\r\n\r\n   /**\r\n    * A semi-generic way to handle multiple lists. Matches\r\n    * the IDs of the droppable container to the names of the\r\n    * source arrays stored in the state.\r\n    */\r\n   id2List = {\r\n      droppable: \"items\",\r\n      droppable2: \"selected\"\r\n   };\r\n\r\n   getList = id => this.state[this.id2List[id]];\r\n\r\n   onDragEnd = result => {\r\n      const { source, destination } = result;\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n         return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n         const items = reorder(\r\n            this.getList(source.droppableId),\r\n            source.index,\r\n            destination.index\r\n         );\r\n\r\n         let state = { items };\r\n\r\n         if (source.droppableId === \"droppable2\") {\r\n            state = { selected: items };\r\n         }\r\n\r\n         this.setState(state);\r\n      } else {\r\n         const result = move(\r\n            this.getList(source.droppableId),\r\n            this.getList(destination.droppableId),\r\n            source,\r\n            destination\r\n         );\r\n\r\n         this.setState({\r\n            items: result.droppable,\r\n            selected: result.droppable2\r\n         });\r\n      }\r\n   };\r\n\r\n   // Normally you would want to split things out into separate components.\r\n   // But in this example everything is just done in one place for simplicity\r\n   render() {\r\n      return (\r\n         <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                     {this.state.items.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n            <Droppable droppableId=\"droppable2\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                     {this.state.selected.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n         </DragDropContext>\r\n      );\r\n   }\r\n}\r\nexport default multipleTarget;\r\n`;\r\nexport default MultipleTargetSource;\r\n"]},"metadata":{},"sourceType":"module"}