{"ast":null,"code":"import _toConsumableArray from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _objectSpread from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\src\\\\views\\\\tables\\\\examples\\\\reactFoldableTable.js\";\nimport React from 'react';\nimport Chance from 'chance';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport selectTableHOC from 'react-table/lib/hoc/selectTable';\nimport treeTableHOC from 'react-table/lib/hoc/treeTable';\nimport testData from \"../data/test-data\";\nvar SelectTreeTable = selectTableHOC(treeTableHOC(ReactTable)); // const CheckboxTable = checkboxHOC(ReactTable);\n\nvar chance = new Chance();\n\nfunction getData() {\n  var data = testData.map(function (item) {\n    // using chancejs to generate guid\n    // shortid is probably better but seems to have performance issues\n    // on codesandbox.io\n    var _id = chance.guid();\n\n    return _objectSpread({\n      _id: _id\n    }, item);\n  });\n  return data;\n}\n\nvar ignoreColumns = ['phone1', 'phone2', 'web', 'email', '_id'];\n\nfunction getColumns(data) {\n  var columns = [];\n  var sample = data[0];\n\n  for (var key in sample) {\n    if (ignoreColumns.includes(key)) continue;\n    columns.push({\n      accessor: key,\n      Header: key,\n      style: {\n        whiteSpace: 'normal'\n      }\n    });\n  }\n\n  return columns;\n}\n\nfunction getNodes(data) {\n  var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  data.forEach(function (item) {\n    if (item.hasOwnProperty('_subRows') && item._subRows) {\n      node = getNodes(item._subRows, node);\n    } else {\n      node.push(item._original);\n    }\n  });\n  return node;\n}\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example(props) {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Example).call(this, props));\n\n    _this.toggleSelection = function (key, shift, row) {\n      /*\r\n        Implementation of how to manage the selection state is up to the developer.\r\n        This implementation uses an array stored in the component state.\r\n        Other implementations could use object keys, a Javascript Set, or Redux... etc.\r\n      */\n      // start off with the existing state\n      if (_this.state.selectType === 'radio') {\n        var selection = [];\n        if (selection.indexOf(key) < 0) selection.push(key);\n\n        _this.setState({\n          selection: selection\n        });\n      } else {\n        var _selection = _toConsumableArray(_this.state.selection);\n\n        var keyIndex = _selection.indexOf(key); // check to see if the key exists\n\n\n        if (keyIndex >= 0) {\n          // it does exist so we will remove it using destructing\n          _selection = [].concat(_toConsumableArray(_selection.slice(0, keyIndex)), _toConsumableArray(_selection.slice(keyIndex + 1)));\n        } else {\n          // it does not exist so add it\n          _selection.push(key);\n        } // update the state\n\n\n        _this.setState({\n          selection: _selection\n        });\n      }\n    };\n\n    _this.toggleAll = function () {\n      /*\r\n        'toggleAll' is a tricky concept with any filterable table\r\n        do you just select ALL the records that are in your data?\r\n        OR\r\n        do you only select ALL the records that are in the current filtered data?\r\n        \r\n        The latter makes more sense because 'selection' is a visual thing for the user.\r\n        This is especially true if you are going to implement a set of external functions\r\n        that act on the selected information (you would not want to DELETE the wrong thing!).\r\n        \r\n        So, to that end, access to the internals of ReactTable are required to get what is\r\n        currently visible in the table (either on the current page or any other page).\r\n        \r\n        The HOC provides a method call 'getWrappedInstance' to get a ref to the wrapped\r\n        ReactTable and then get the internal state and the 'sortedData'. \r\n        That can then be iterrated to get all the currently visible records and set\r\n        the selection state.\r\n      */\n      var selectAll = _this.state.selectAll ? false : true;\n      var selection = [];\n\n      if (selectAll) {\n        // we need to get at the internals of ReactTable\n        var wrappedInstance = _this.selectTable.getWrappedInstance(); // the 'sortedData' property contains the currently accessible records based on the filter and sort\n\n\n        var currentRecords = wrappedInstance.getResolvedState().sortedData; // we need to get all the 'real' (original) records out to get at their IDs\n\n        var nodes = getNodes(currentRecords); // we just push all the IDs onto the selection array\n\n        nodes.forEach(function (item) {\n          selection.push(item._id);\n        });\n      }\n\n      _this.setState({\n        selectAll: selectAll,\n        selection: selection\n      });\n    };\n\n    _this.isSelected = function (key) {\n      /*\r\n        Instead of passing our external selection state we provide an 'isSelected'\r\n        callback and detect the selection state ourselves. This allows any implementation\r\n        for selection (either an array, object keys, or even a Javascript Set object).\r\n      */\n      return _this.state.selection.includes(key);\n    };\n\n    _this.logSelection = function () {\n      console.log('selection:', _this.state.selection);\n    };\n\n    _this.toggleType = function () {\n      _this.setState({\n        selectType: _this.state.selectType === 'radio' ? 'checkbox' : 'radio',\n        selection: [],\n        selectAll: false\n      });\n    };\n\n    _this.toggleTree = function () {\n      if (_this.state.pivotBy.length) {\n        _this.setState({\n          pivotBy: [],\n          expanded: {}\n        });\n      } else {\n        _this.setState({\n          pivotBy: ['state', 'post'],\n          expanded: {}\n        });\n      }\n    };\n\n    _this.onExpandedChange = function (expanded) {\n      _this.setState({\n        expanded: expanded\n      });\n    };\n\n    var data = getData();\n    var columns = getColumns(data);\n    _this.state = {\n      data: data,\n      columns: columns,\n      selection: [],\n      selectAll: false,\n      selectType: 'checkbox',\n      pivotBy: ['state', 'post'],\n      expanded: {}\n    };\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var toggleSelection = this.toggleSelection,\n          toggleAll = this.toggleAll,\n          isSelected = this.isSelected,\n          logSelection = this.logSelection,\n          toggleType = this.toggleType,\n          onExpandedChange = this.onExpandedChange,\n          toggleTree = this.toggleTree;\n      var _this$state = this.state,\n          data = _this$state.data,\n          columns = _this$state.columns,\n          selectAll = _this$state.selectAll,\n          selectType = _this$state.selectType,\n          pivotBy = _this$state.pivotBy,\n          expanded = _this$state.expanded;\n      var extraProps = {\n        selectAll: selectAll,\n        isSelected: isSelected,\n        toggleAll: toggleAll,\n        toggleSelection: toggleSelection,\n        selectType: selectType,\n        pivotBy: pivotBy,\n        expanded: expanded,\n        onExpandedChange: onExpandedChange\n      };\n      return React.createElement(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"This example combines two HOCs (the TreeTable and the SelectTable) to make a composite component.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"We'll call it SelectTreeTable!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Here is what the buttons do:\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Toggle Tree:\"), \" enables or disabled the pivotBy on the table.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Select Type:\"), \" changes from 'checkbox' to 'radio' and back again.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Log Selection to Console:\"), \" open your console to see what has been selected.\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"NOTE:\"), \" the selection is maintained when toggling the tree on and off but is cleared when switching between select types (radio, checkbox).\"), React.createElement(\"button\", {\n        className: \"btn btn-primary mr-2\",\n        onClick: toggleTree,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Toggle Tree [\", pivotBy && pivotBy.length ? pivotBy.join(', ') : '', \"]\"), React.createElement(\"button\", {\n        className: \"btn btn-primary mr-2\",\n        onClick: toggleType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Select Type: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, selectType)), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: logSelection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Log Selection to Console\"), \" (\".concat(this.state.selection.length, \") selected\"), data ? React.createElement(SelectTreeTable, Object.assign({\n        data: data,\n        columns: columns,\n        ref: function ref(r) {\n          return _this2.selectTable = r;\n        },\n        className: \"-striped -highlight\"\n      }, extraProps, {\n        pageSize: 5,\n        freezWhenExpanded: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })) : null);\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":{"version":3,"sources":["C:/xampp/htdocs/api_react/src/views/tables/examples/reactFoldableTable.js"],"names":["React","Chance","ReactTable","selectTableHOC","treeTableHOC","testData","SelectTreeTable","chance","getData","data","map","item","_id","guid","ignoreColumns","getColumns","columns","sample","key","includes","push","accessor","Header","style","whiteSpace","getNodes","node","forEach","hasOwnProperty","_subRows","_original","Example","props","toggleSelection","shift","row","state","selectType","selection","indexOf","setState","keyIndex","slice","toggleAll","selectAll","wrappedInstance","selectTable","getWrappedInstance","currentRecords","getResolvedState","sortedData","nodes","isSelected","logSelection","console","log","toggleType","toggleTree","pivotBy","length","expanded","onExpandedChange","extraProps","padding","join","r","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Chance from 'chance'\r\n\r\nimport ReactTable from 'react-table'\r\nimport 'react-table/react-table.css'\r\n\r\nimport selectTableHOC from 'react-table/lib/hoc/selectTable'\r\nimport treeTableHOC from 'react-table/lib/hoc/treeTable'\r\n\r\nimport testData from \"../data/test-data\";\r\n\r\nconst SelectTreeTable = selectTableHOC(treeTableHOC(ReactTable))\r\n// const CheckboxTable = checkboxHOC(ReactTable);\r\nconst chance = new Chance();\r\n\r\nfunction getData() {\r\n  const data = testData.map((item) => {\r\n    // using chancejs to generate guid\r\n    // shortid is probably better but seems to have performance issues\r\n    // on codesandbox.io\r\n    const _id = chance.guid();\r\n    return {\r\n      _id,\r\n      ...item,\r\n    }\r\n  })\r\n  return data;\r\n}\r\n\r\nconst ignoreColumns = ['phone1','phone2','web','email','_id'];\r\nfunction getColumns(data) {\r\n  const columns = [];\r\n  const sample = data[0];\r\n  for (let key in sample) {\r\n    if (ignoreColumns.includes(key)) continue;\r\n    columns.push({\r\n      accessor: key,\r\n      Header: key,\r\n      style: { whiteSpace: 'normal' },\r\n    })\r\n  }\r\n  return columns;\r\n}\r\n\r\nfunction getNodes(data, node = []) {\r\n  data.forEach((item) => {\r\n    if (item.hasOwnProperty('_subRows') && item._subRows) {\r\n      node = getNodes(item._subRows, node);\r\n    } else {\r\n      node.push(item._original);\r\n    }\r\n  });\r\n  return node;\r\n}\r\n\r\nexport default class Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const data = getData();\r\n    const columns = getColumns(data);\r\n    this.state = {\r\n      data,\r\n      columns,\r\n      selection: [],\r\n      selectAll: false,\r\n      selectType: 'checkbox',\r\n      pivotBy: ['state', 'post'],\r\n      expanded: {},\r\n    };\r\n  }\r\n  toggleSelection = (key, shift, row) => {\r\n    /*\r\n      Implementation of how to manage the selection state is up to the developer.\r\n      This implementation uses an array stored in the component state.\r\n      Other implementations could use object keys, a Javascript Set, or Redux... etc.\r\n    */\r\n    // start off with the existing state\r\n    if (this.state.selectType === 'radio') {\r\n      let selection = [];\r\n      if (selection.indexOf(key) < 0) selection.push(key);\r\n      this.setState({ selection });\r\n    } else {\r\n      let selection = [\r\n        ...this.state.selection\r\n      ];\r\n      const keyIndex = selection.indexOf(key);\r\n      // check to see if the key exists\r\n      if (keyIndex >= 0) {\r\n        // it does exist so we will remove it using destructing\r\n        selection = [\r\n          ...selection.slice(0, keyIndex),\r\n          ...selection.slice(keyIndex + 1)\r\n        ]\r\n      } else {\r\n        // it does not exist so add it\r\n        selection.push(key);\r\n      }\r\n      // update the state\r\n      this.setState({ selection });\r\n    }\r\n  }\r\n  toggleAll = () => {\r\n    /*\r\n      'toggleAll' is a tricky concept with any filterable table\r\n      do you just select ALL the records that are in your data?\r\n      OR\r\n      do you only select ALL the records that are in the current filtered data?\r\n      \r\n      The latter makes more sense because 'selection' is a visual thing for the user.\r\n      This is especially true if you are going to implement a set of external functions\r\n      that act on the selected information (you would not want to DELETE the wrong thing!).\r\n      \r\n      So, to that end, access to the internals of ReactTable are required to get what is\r\n      currently visible in the table (either on the current page or any other page).\r\n      \r\n      The HOC provides a method call 'getWrappedInstance' to get a ref to the wrapped\r\n      ReactTable and then get the internal state and the 'sortedData'. \r\n      That can then be iterrated to get all the currently visible records and set\r\n      the selection state.\r\n    */\r\n    const selectAll = this.state.selectAll ? false : true;\r\n    const selection = [];\r\n    if (selectAll) {\r\n      // we need to get at the internals of ReactTable\r\n      const wrappedInstance = this.selectTable.getWrappedInstance();\r\n      // the 'sortedData' property contains the currently accessible records based on the filter and sort\r\n      const currentRecords = wrappedInstance.getResolvedState().sortedData;\r\n      // we need to get all the 'real' (original) records out to get at their IDs\r\n      const nodes = getNodes(currentRecords);\r\n      // we just push all the IDs onto the selection array\r\n      nodes.forEach((item) => {\r\n        selection.push(item._id);\r\n      })\r\n    }\r\n    this.setState({ selectAll, selection })\r\n  }\r\n  isSelected = (key) => {\r\n    /*\r\n      Instead of passing our external selection state we provide an 'isSelected'\r\n      callback and detect the selection state ourselves. This allows any implementation\r\n      for selection (either an array, object keys, or even a Javascript Set object).\r\n    */\r\n    return this.state.selection.includes(key);\r\n  }\r\n  logSelection = () => {\r\n    console.log('selection:', this.state.selection);\r\n  }\r\n  toggleType = () => {\r\n    this.setState({ selectType: this.state.selectType === 'radio' ? 'checkbox' : 'radio', selection: [], selectAll: false, });\r\n  }\r\n  toggleTree = () => {\r\n    if (this.state.pivotBy.length) {\r\n      this.setState({ pivotBy: [], expanded: {} });\r\n    } else {\r\n      this.setState({ pivotBy: ['state', 'post'], expanded: {} });\r\n    }\r\n  }\r\n  onExpandedChange = (expanded) => {\r\n    this.setState({ expanded });\r\n  }\r\n  render() {\r\n    const { \r\n      toggleSelection, toggleAll, isSelected, \r\n      logSelection, toggleType,\r\n      onExpandedChange, toggleTree,\r\n    } = this;\r\n    const { data, columns, selectAll, selectType, pivotBy, expanded } = this.state;\r\n    const extraProps =\r\n      {\r\n        selectAll,\r\n        isSelected,\r\n        toggleAll,\r\n        toggleSelection,\r\n        selectType,\r\n        pivotBy,\r\n        expanded,\r\n        onExpandedChange,\r\n      }\r\n    return (\r\n      <div style={{ padding: '10px' }}>        \r\n        <p>This example combines two HOCs (the TreeTable and the SelectTable) to make a composite component.</p>\r\n        <p>We'll call it SelectTreeTable!</p>\r\n        <p>Here is what the buttons do:</p>\r\n        <ul>\r\n          <li><strong>Toggle Tree:</strong> enables or disabled the pivotBy on the table.</li>\r\n          <li><strong>Select Type:</strong> changes from 'checkbox' to 'radio' and back again.</li>\r\n          <li><strong>Log Selection to Console:</strong> open your console to see what has been selected.</li>\r\n        </ul>\r\n        <p>\r\n          <strong>NOTE:</strong> the selection is maintained when toggling the tree on and off but is cleared\r\n          when switching between select types (radio, checkbox).\r\n        </p>\r\n        <button className=\"btn btn-primary mr-2\" onClick={toggleTree}>Toggle Tree [{pivotBy && pivotBy.length ? pivotBy.join(', ') : ''}]</button>\r\n        <button className=\"btn btn-primary mr-2\" onClick={toggleType}>Select Type: <strong>{selectType}</strong></button>\r\n        <button className=\"btn btn-primary\" onClick={logSelection}>Log Selection to Console</button>\r\n        {` (${this.state.selection.length}) selected`}\r\n        {\r\n          data ?\r\n            <SelectTreeTable\r\n              data={data}\r\n              columns={columns}\r\n              ref={(r) => this.selectTable = r}\r\n              className=\"-striped -highlight\"\r\n              {...extraProps}\r\n              pageSize={5}\r\n              freezWhenExpanded={true}\r\n            />\r\n            : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}