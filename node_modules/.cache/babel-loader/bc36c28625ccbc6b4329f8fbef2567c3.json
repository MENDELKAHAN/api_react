{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _objectSpread from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\src\\\\views\\\\components\\\\extra\\\\examples\\\\dndHorizontalList.js\";\nimport React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // fake data generator\n\nvar getItems = function getItems(count) {\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k),\n      content: \"item \".concat(k)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: \"0 \".concat(grid, \"px 0 0\"),\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\"\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    display: \"flex\",\n    padding: grid,\n    overflow: \"auto\"\n  };\n};\n\nvar HorizontalList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HorizontalList, _Component);\n\n  function HorizontalList(props) {\n    var _this;\n\n    _classCallCheck(this, HorizontalList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HorizontalList).call(this, props));\n    _this.state = {\n      items: getItems(6)\n    };\n    _this.onDragEnd = _this.onDragEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(HorizontalList, [{\n    key: \"onDragEnd\",\n    value: function onDragEnd(result) {\n      // dropped outside the list\n      if (!result.destination) {\n        return;\n      }\n\n      var items = reorder(this.state.items, result.source.index, result.destination.index);\n      this.setState({\n        items: items\n      });\n    } // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        direction: \"horizontal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", Object.assign({\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver)\n        }, provided.droppableProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }), _this2.state.items.map(function (item, index) {\n          return React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, function (provided, snapshot) {\n            return React.createElement(\"div\", Object.assign({\n              className: \"white bg-success\",\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87\n              },\n              __self: this\n            }), item.content);\n          });\n        }), provided.placeholder);\n      }));\n    }\n  }]);\n\n  return HorizontalList;\n}(Component);\n\nexport default HorizontalList;","map":{"version":3,"sources":["C:/xampp/htdocs/api_react/src/views/components/extra/examples/dndHorizontalList.js"],"names":["React","Component","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","display","overflow","HorizontalList","props","state","items","onDragEnd","bind","destination","source","index","setState","provided","snapshot","innerRef","droppableProps","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n   Array.from({ length: count }, (v, k) => k).map(k => ({\r\n      id: `item-${k}`,\r\n      content: `item ${k}`\r\n   }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n   const result = Array.from(list);\r\n   const [removed] = result.splice(startIndex, 1);\r\n   result.splice(endIndex, 0, removed);\r\n\r\n   return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n   // some basic styles to make the items look a bit nicer\r\n   userSelect: \"none\",\r\n   padding: grid * 2,\r\n   margin: `0 ${grid}px 0 0`,\r\n\r\n   // change background colour if dragging\r\n   background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n   // styles we need to apply on draggables\r\n   ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n   display: \"flex\",\r\n   padding: grid,\r\n   overflow: \"auto\"\r\n});\r\n\r\nclass HorizontalList extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         items: getItems(6)\r\n      };\r\n      this.onDragEnd = this.onDragEnd.bind(this);\r\n   }\r\n\r\n   onDragEnd(result) {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n         return;\r\n      }\r\n\r\n      const items = reorder(\r\n         this.state.items,\r\n         result.source.index,\r\n         result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n         items\r\n      });\r\n   }\r\n\r\n   // Normally you would want to split things out into separate components.\r\n   // But in this example everything is just done in one place for simplicity\r\n   render() {\r\n      return (\r\n         <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                     {...provided.droppableProps}\r\n                  >\r\n                     {this.state.items.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div className=\"white bg-success\"\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n         </DragDropContext>\r\n      );\r\n   }\r\n}\r\n\r\nexport default HorizontalList;\r\n"]},"metadata":{},"sourceType":"module"}