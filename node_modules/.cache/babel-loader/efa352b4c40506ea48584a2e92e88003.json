{"ast":null,"code":"import _objectSpread from \"C:\\\\xampp\\\\htdocs\\\\api_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport emailData from './emailData';\n\nvar emails = function emails() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emailData;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'STAR_EMAIL':\n      return state.map(function (email) {\n        return email.id === action.id ? _objectSpread({}, email, {\n          starred: !email.starred\n        }) : email;\n      });\n\n    case 'IMPORTANT_EMAIL':\n      return state.map(function (email) {\n        return email.id === action.id ? _objectSpread({}, email, {\n          important: !email.important\n        }) : email;\n      });\n\n    case 'TRASH_EMAIL':\n      var _emails = [];\n\n      for (var i = 0; i < state.length; i++) {\n        _emails.push(state[i]);\n\n        for (var j = 0; j < action.id.length; j++) {\n          if (state[i].id === action.id[j]) {\n            _emails[i].trash = true;\n          }\n        }\n      }\n\n      return _emails;\n\n    case 'ASSIGN_FOLDER':\n      var folderEmails = [];\n\n      for (var a = 0; a < state.length; a++) {\n        folderEmails.push(state[a]);\n\n        for (var b = 0; b < action.id.length; b++) {\n          if (state[a].id === action.id[b]) {\n            switch (action.folder) {\n              case 'inbox':\n                folderEmails[a].inbox = true;\n                folderEmails[a].sent = false;\n                folderEmails[a].draft = false;\n                folderEmails[a].spam = false;\n                folderEmails[a].trash = false;\n                break;\n\n              case 'sent':\n                folderEmails[a].inbox = false;\n                folderEmails[a].sent = true;\n                folderEmails[a].draft = false;\n                folderEmails[a].spam = false;\n                folderEmails[a].trash = false;\n                break;\n\n              case 'draft':\n                folderEmails[a].inbox = false;\n                folderEmails[a].sent = false;\n                folderEmails[a].draft = true;\n                folderEmails[a].spam = false;\n                folderEmails[a].trash = false;\n                break;\n\n              case 'spam':\n                folderEmails[a].inbox = false;\n                folderEmails[a].sent = false;\n                folderEmails[a].draft = false;\n                folderEmails[a].spam = true;\n                folderEmails[a].trash = false;\n                break;\n\n              case 'trash':\n                folderEmails[a].inbox = false;\n                folderEmails[a].sent = false;\n                folderEmails[a].draft = false;\n                folderEmails[a].spam = false;\n                folderEmails[a].trash = true;\n                break;\n\n              default:\n                folderEmails[a].inbox = true;\n                folderEmails[a].sent = false;\n                folderEmails[a].draft = false;\n                folderEmails[a].spam = false;\n                folderEmails[a].trash = false;\n                break;\n            }\n          }\n        }\n      }\n\n      return folderEmails;\n\n    case 'ASSIGN_LABEL':\n      var labelEmails = [];\n\n      for (var c = 0; c < state.length; c++) {\n        labelEmails.push(state[c]);\n\n        for (var d = 0; d < action.id.length; d++) {\n          if (state[c].id === action.id[d]) {\n            labelEmails[c].label = action.label;\n          }\n        }\n      }\n\n      return labelEmails;\n\n    default:\n      return state;\n  }\n};\n\nexport default emails;","map":{"version":3,"sources":["C:/xampp/htdocs/api_react/src/redux/reducers/email/emails.js"],"names":["emailData","emails","state","action","type","map","email","id","starred","important","i","length","push","j","trash","folderEmails","a","b","folder","inbox","sent","draft","spam","labelEmails","c","d","label"],"mappings":"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","sourcesContent":["import emailData from './emailData';\r\n\r\nconst emails = (state = emailData, action) => {\r\n    switch (action.type) {\r\n        case 'STAR_EMAIL':\r\n            return state.map(email =>\r\n                (email.id === action.id)\r\n                    ? {...email, starred: !email.starred}\r\n                    : email\r\n                )\r\n        case 'IMPORTANT_EMAIL':\r\n            return state.map(email =>\r\n                (email.id === action.id)\r\n                    ? {...email, important: !email.important}\r\n                    : email\r\n                )\r\n        case 'TRASH_EMAIL':\r\n            let emails = [];\r\n            for(let i = 0; i < state.length; i++){\r\n                emails.push(state[i]);\r\n                for(let j = 0; j < action.id.length; j++){\r\n                    if(state[i].id === action.id[j]){   \r\n                        emails[i].trash = true\r\n                    }\r\n                }\r\n            }\r\n            return emails\r\n        case 'ASSIGN_FOLDER':\r\n            let folderEmails = [];\r\n            for(let a = 0; a < state.length; a++){\r\n                folderEmails.push(state[a]);\r\n                for(let b = 0; b < action.id.length; b++){\r\n                    if(state[a].id === action.id[b]){ \r\n                        switch(action.folder){\r\n                            case 'inbox':\r\n                                folderEmails[a].inbox = true\r\n                                folderEmails[a].sent = false\r\n                                folderEmails[a].draft = false\r\n                                folderEmails[a].spam = false\r\n                                folderEmails[a].trash = false\r\n                                break;\r\n                            case 'sent':\r\n                                folderEmails[a].inbox = false\r\n                                folderEmails[a].sent = true\r\n                                folderEmails[a].draft = false\r\n                                folderEmails[a].spam = false\r\n                                folderEmails[a].trash = false\r\n                                break;\r\n                            case 'draft':\r\n                                folderEmails[a].inbox = false\r\n                                folderEmails[a].sent = false\r\n                                folderEmails[a].draft = true\r\n                                folderEmails[a].spam = false\r\n                                folderEmails[a].trash = false\r\n                                break;\r\n                            case 'spam':\r\n                                folderEmails[a].inbox = false\r\n                                folderEmails[a].sent = false\r\n                                folderEmails[a].draft = false\r\n                                folderEmails[a].spam = true\r\n                                folderEmails[a].trash = false\r\n                                break;\r\n                            case 'trash':\r\n                                folderEmails[a].inbox = false\r\n                                folderEmails[a].sent = false\r\n                                folderEmails[a].draft = false\r\n                                folderEmails[a].spam = false\r\n                                folderEmails[a].trash = true\r\n                                break;\r\n                            default:\r\n                                folderEmails[a].inbox = true\r\n                                folderEmails[a].sent = false\r\n                                folderEmails[a].draft = false\r\n                                folderEmails[a].spam = false\r\n                                folderEmails[a].trash = false\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return folderEmails\r\n        case 'ASSIGN_LABEL':\r\n            let labelEmails = [];\r\n            for(let c = 0; c < state.length; c++){\r\n                labelEmails.push(state[c]);\r\n                for(let d = 0; d < action.id.length; d++){\r\n                    if(state[c].id === action.id[d]){\r\n                        labelEmails[c].label = action.label\r\n                    }\r\n                }\r\n            }\r\n            return labelEmails\r\n       default:\r\n            return state\r\n    }\r\n }\r\n export default emails"]},"metadata":{},"sourceType":"module"}